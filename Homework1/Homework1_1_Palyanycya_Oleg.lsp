;using functions from test1_Palyanycya_oleg.lsp
(load "test1_Palyanycya_oleg.lsp")

(defun get-pos-of-elem (arr elem &optional (pos 1))
	(if (eq arr nil)
		(progn nil)
		(if (= (car arr) elem)
			(progn pos)
			(get-pos-of-elem (cdr arr) elem (+ pos 1))
		)
	)
)

(defun get-min-elem (arr min-elem)
	(if (eq arr nil)
		(progn min-elem)
		(if (< (car arr) min-elem)
			(get-min-elem (cdr arr) (car arr))
			(get-min-elem (cdr arr) min-elem)
		)
	)
)

(defun insert-elem-in-pos (arr elem pos &optional (tmplist nil))
	(if (< pos 1)
		(cons elem arr)	
		(if (not(= pos 1))
			(insert-elem-in-pos (cdr arr) elem (- pos 1) (cons (car arr) tmplist))
			(stick tmplist (cons elem arr))
		)
	)
)

(defun sort-selection(arr &optional (tmplist nil))
	(if (not(eq (cdr arr) nil))
		(let* ((min-elem (get-min-elem arr (car arr)))
			 (pos-min-elem (get-pos-of-elem arr (get-min-elem arr (car arr))))
			 (first-elem (car arr))
			 (sorted-arr (cons min-elem (cdr(insert-elem-in-pos(delete-elem arr pos-min-elem) first-elem pos-min-elem)))))
			(sort-selection (cdr sorted-arr) (cons (car sorted-arr) tmplist))
		)
		(stick tmplist arr)
	)
)
